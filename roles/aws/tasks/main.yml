- name: generate generation GUID
  set_fact:
    generation_guid: "{{ 9999999999999999999999 | random | to_uuid }}"

- name: create ec2 instance for cluster master
  ec2:
    #    aws_access_key: "{{ aws_access_key }}"
    #    aws_secret_key: "{{ aws_secret_key }}"
    image: "{{ ami_image }}"
    key_name: "{{ key_name }}"
    wait: yes
    instance_type: "{{ cluster_master_type }}"
    group_id: "{{ security_group_id }}"
    region: ap-southeast-1
    volumes:
    - device_name: /dev/xvda
      volume_type: gp3
      volume_size: 10
      delete_on_termination: true
    instance_tags:
      Name: "cluster_master {{ instance_id }}"
      Purpose: "{{ instance_id }}_{{ generation_guid }}"
      Group: by ansible
    count_tag:
      Name: Ansible
    exact_count: 1
  register: ec2clustermaster

- name: create ec2 instance for site1 indexers
  ec2:
    #    aws_access_key: "{{ aws_access_key }}"
    #    aws_secret_key: "{{ aws_secret_key }}"
    image: "{{ ami_image }}"
    key_name: "{{ key_name }}"
    wait: yes
    instance_type: "{{ indexer_type }}"
    group_id: "{{ security_group_id }}"
    region: ap-southeast-1
    volumes:
    - device_name: /dev/xvda
      volume_type: gp3
      volume_size: 20
      delete_on_termination: true
    instance_tags:
      Name: "site1_indexers {{ instance_id }}"
      Purpose: "{{ instance_id }}_{{ generation_guid }}"
      Group: by ansible
    count_tag:
      Name: Ansible
    exact_count: "{{ site1indexers }}"
  register: ec2site1indexers

- name: create ec2 instance for site2 indexers
  ec2:
    #    aws_access_key: "{{ aws_access_key }}"
    #    aws_secret_key: "{{ aws_secret_key }}"
    image: "{{ ami_image }}"
    key_name: "{{ key_name }}"
    wait: yes
    instance_type: "{{ indexer_type }}"
    group_id: "{{ security_group_id }}"
    region: ap-southeast-1
    volumes:
    - device_name: /dev/xvda
      volume_type: gp3
      volume_size: 20
      delete_on_termination: true
    instance_tags:
      Name: "site2_indexers {{ instance_id }}"
      Purpose: "{{ instance_id }}_{{ generation_guid }}"
      Group: by ansible
    count_tag:
      Name: Ansible
    exact_count: "{{ site2indexers }}"
  register: ec2site2indexers
  when: cluster_type != "single"

- name: create ec2 instance for deployer
  ec2:
    #    aws_access_key: "{{ aws_access_key }}"
    #    aws_secret_key: "{{ aws_secret_key }}"
    image: "{{ ami_image }}"
    key_name: "{{ key_name }}"
    wait: yes
    instance_type: "{{ deployer_type }}"
    group_id: "{{ security_group_id }}"
    region: ap-southeast-1
    volumes:
    - device_name: /dev/xvda
      volume_type: gp3
      volume_size: 10
      delete_on_termination: true
    instance_tags:
      Name: "deployer {{ instance_id }}"
      Purpose: "{{ instance_id }}_{{ generation_guid }}"
      Group: by ansible
    count_tag:
      Name: Ansible
    exact_count: 1
  register: ec2deployer
  when:
    - searchheadcluster == "yes"
    - searchheads > 0

- name: create ec2 instance for search heads
  ec2:
    #    aws_access_key: "{{ aws_access_key }}"
    #    aws_secret_key: "{{ aws_secret_key }}"
    image: "{{ ami_image }}"
    key_name: "{{ key_name }}"
    wait: yes
    instance_type: "{{ search_head_type }}"
    group_id: "{{ security_group_id }}"
    region: ap-southeast-1
    volumes:
    - device_name: /dev/xvda
      volume_type: gp3
      volume_size: 10
      delete_on_termination: true
    instance_tags:
      Name: "search_heads {{ instance_id }}"
      Purpose: "{{ instance_id }}_{{ generation_guid }}"
      Group: by ansible
    count_tag:
      Name: Ansible
    exact_count: "{{ searchheads }}"
  register: ec2searchhead
  when: searchheads != 0

- name: Remove ec2 inventory file
  file:
    path: ./ec2_inventory
    state: absent

- name: Build ec2 inventory
  lineinfile:
    path: ./ec2_inventory
    line: "[ec2_instances]"
    state: present
    create: yes

- name: all ec2 instances - cluster master - add to inventory
  lineinfile:
    path: ./ec2_inventory
    line: "{{ item }}"
  loop: "{{ ec2clustermaster.instance_ids }}"

- name: all ec2 instances - site 1 indexers - add to inventory
  lineinfile:
    path: ./ec2_inventory
    line: "{{ item }}"
  loop: "{{ ec2site1indexers.instance_ids }}"

- name: all ec2 instances - site 2 indexers - add to inventory
  lineinfile:
    path: ./ec2_inventory
    line: "{{ item }}"
  loop: "{{ ec2site2indexers.instance_ids }}"
  when: cluster_type != "single"

- name: all ec2 instances - search heads - add to inventory
  lineinfile:
    path: ./ec2_inventory
    line: "{{ item }}"
  loop: "{{ ec2searchhead.instance_ids }}"
  when: searchheads != 0

- name: all ec2 instances - deployer - add to inventory
  lineinfile:
    path: ./ec2_inventory
    line: "{{ item }}"
  loop: "{{ ec2deployer.instance_ids }}"
  when: searchheadcluster == "yes"

- name: all ec2 instances - cluster master
  set_fact:
    ec2instances: "{{ ec2instances + [item.private_ip] }}"
  with_items: "{{ ec2clustermaster.instances }}"

- name: all ec2 instances - site 1 indexers
  set_fact:
    ec2instances: "{{ ec2instances + [item.private_ip] }}"
  with_items: "{{ ec2site1indexers.instances }}"

- name: all ec2 instances - site 2 indexers
  set_fact:
    ec2instances: "{{ ec2instances + [item.private_ip] }}"
  with_items: "{{ ec2site2indexers.instances }}"
  when: cluster_type != "single"

- name: all ec2 instances - ec2deployer
  set_fact:
    ec2instances: "{{ ec2instances + [item.private_ip] }}"
  with_items: "{{ ec2deployer.instances }}"
  when:
    - searchheadcluster == "yes"
    - searchheads > 0

- name: all ec2 instances - search heads
  set_fact:
    ec2instances: "{{ ec2instances + [item.private_ip] }}"
  with_items: "{{ ec2searchhead.instances }}"
  when: searchheads != 0

- name: loop to delete the records
  lineinfile:
    path: ~/.ssh/known_hosts
    state: absent
    regexp: '^{{ item }}\s'
  loop: "{{ ec2instances }}"

- name: Validating if the SSH has come up
  wait_for:
      host: "{{ item }}"
      port: 22
      delay: 10
      timeout: 30
      msg: "SSH PORT is not Listening"
  loop: "{{ ec2instances }}"

- name: add to known_hosts
  shell: |
      ssh-keyscan {{ item }} >> ~/.ssh/known_hosts
  loop: "{{ ec2instances }}"

- name: Add the cluster master
  add_host:
    name: "{{ item }}"
    groups: cluster_master
    servername: 'clustermaster_{{ instance_id }}'
    site: site0
  loop: "{{ ec2instances[0:1] }}"

- name: Add the site 1 indexers
  add_host:
    name: "{{ item }}"
    groups: indexer
    servername: 'idx{{ idx_number+1 }}_s1_{{ instance_id }}'
    site: 'site1'
  loop: "{{ ec2instances[1:site1indexers+1] }}"
  loop_control:
      index_var: idx_number

- name: Add the site 2 indexers
  add_host:
    name: "{{ item }}"
    groups: indexer
    servername: 'idx{{ idx_number+1 }}_s2_{{ instance_id }}'
    site: 'site2'
  loop: "{{ ec2instances[site1indexers+1:site1indexers+site2indexers+1] }}"
  loop_control:
      index_var: idx_number
  when: cluster_type != "single"

- name: Add the deployer
  add_host:
    name: "{{ item }}"
    groups: deployer
    servername: 'deployer_{{ instance_id }}'
    site: site0
  loop: "{{ ec2instances[site1indexers+site2indexers+1:site1indexers+site2indexers+2] }}"
  when:
    - searchheadcluster == "yes"
    - searchheads > 0

- name: Add the search heads cluster members
  add_host:
    name: "{{ item }}"
    groups: 
      - search_head
      - shcmember
    servername: 'searchhead{{ sh_number+1 }}_{{ instance_id }}'
    site: 'site{{ sh_site }}'
  loop: "{{ ec2instances[site1indexers+site2indexers+2:] }}"
  loop_control:
      index_var: sh_number
  when:
    - searchheadcluster == "yes"
    - searchheads > 0

- name: Add the search heads non clustered
  add_host:
    name: "{{ item }}"
    groups: search_head
    servername: 'searchhead{{ sh_number+1 }}_{{ instance_id }}'
    site: 'site{{ (sh_number+1) % 3}}'
  loop: "{{ ec2instances[site1indexers+site2indexers+1:] }}"
  loop_control:
      index_var: sh_number
  when:
    - searchheadcluster != "yes"
    - searchheads > 0

- name: Add the search heads captain node
  add_host:
    name: "{{ ec2instances[site1indexers+site2indexers+2] }}"
    groups: captain
    servername: 'searchhead1_{{ instance_id }}'
  when:
    - searchheadcluster == "yes"
    - searchheads > 0
